#' For Getting Correlation table
#'
#' @param Data
#' A data frame for which the correlation needs to be calculated
#' @return
#' A data frame which gives the correlation for two variables
#' @export
#'
#' @examples
Correlationtable <- function(Data){
rowname <- colnames(Data)
colname <- colnames(Data)
cortable <- data.frame(matrix(data = NA,nrow = ncol(Data),ncol = ncol(Data),byrow = T,dimnames = list(rowname,colname)))
for(i in 1:length(Data)){
for(j in 1:length(Data)){
cortable[i,j] <- correlation(Data[,i],Data[,j])
}
}
return(cortable)
}
#' A numeric vector
#' @return
#' correlation number
#' @export
#'
#' @examples
#' data(mtcars)
#' x <- mtcars$mpg
#' y <- mtcars$cyl
#' corr <- correlation(x,y)
correlation <- function(x,y){
xmean <- calculatemean(x)
ymean <- calculatemean(y)
result <- NULL
if(length(x)==length(y)){
for(i in 1:length(x)){
res <- (x[i]-xmean)*(y[i]-ymean)
if(is.null(result)){
result <- res
}else{
result <- result + res
}
}
}
xcalc <- calculatevariance(x)*(length(x)-1)
ycalc <- calculatevariance(y)*(length(y)-1)
correlation <- result/(xcalc*ycalc)^0.5
return(correlation)
}
t <- Correlationtable(Data = mtcars)
#'
#' @param x
#' A numeric vector whose mean is to be calculated
#' @return
#' numeric value;mean calculated
#' @export
#'
#' @examples
#' x <- c(5,6,7,8,9,10)
#' mean <- calculatemean(x)
calculatemean <- function(x){
sum <- sum(x) #Summation
nos <- length(x) #number of observations
mean <- sum/nos
return(mean)
}
t <- Correlationtable(Data = mtcars)
#'
#' @param x
#' A numeric vector whose median is to be calculated
#' @return
#' numeric value;variance calculated
#' @export
#'
#' @examples
#' x <- c(5,6,7,8,9,10)
#' var <- calculatevariance(x)
calculatevariance <- function(x){
#x <- MarketingData$Sales
result <- NULL
mean <- calculatemean(x) #Calculating the mean.
for(i in 1:length(x)){
#i <- 2
res <- (x[i]-mean)^2
if(is.null(result)){
result <- res
}else{
result <- result + res
}
}
variance <- result/(length(x)-1)
return(variance)
}
t <- Correlationtable(Data = mtcars)
View(t)
View(cor(mtcars))
?cor
nrow(mtcars)
x <- c(1,2,3,4)
!is.vector(x)
is.vector(x)
mtcars[2,3] <- NA
which(is.na(mtcars))
mtcars[which(is.na(mtcars))]
View(mtcars)
is.na(data())
is.na(mtcars)
x <- c(1,2,3,4,5,NA,6,7)
is.na(x)
which(is.na(x))
Data[,which(is.na(Data))]
mtcars[,which(is.na(mtcars))]
n <- mtcars$mpg
k <- 2
R2 <- 0.7
!is.vector(n) & !is.numeric(k) & !is.numeric(R2)
R2 <- matrix()
!is.vector(n) & !is.numeric(k) & !is.numeric(R2)
!is.numeric(R2)
(!is.vector(n)) & (!is.numeric(k)) & (!is.numeric(R2))
(!is.vector(n)) | (!is.numeric(k)) | (!is.numeric(R2))
library(Metrics)
Metrics::calculatemean(mtcars$mpg)
mtcars$mpg
mean(mtcars$mpg)
#'
#' @param x
#' A numeric vector whose mean is to be calculated
#' @return
#' numeric value;mean calculated
#' @export
#'
#' @examples
#' x <- c(5,6,7,8,9,10)
#' mean <- calculatemean(x)
calculatemean <- function(x){
if(!is.vector(x)){
stop("x should be a vector")
}
if(is.na(x)){
warning("Data contains NA, coercing  NA to Zero")
x[which(is.na(x))] <- 0
}
if(length(x)<1){
stop("x contains no element")
}
if(class(x) != "numeric"){
stop("x should be a numeric vector")
}
sum <- sum(x) #Summation
nos <- length(x) #number of observations
mean <- sum/nos
return(mean)
}
calculatemean(mtcars$mpg)
#'
#' @param x
#' A numeric vector whose mean is to be calculated
#' @return
#' numeric value;mean calculated
#' @export
#'
#' @examples
#' x <- c(5,6,7,8,9,10)
#' mean <- calculatemean(x)
calculatemean <- function(x){
browser()
if(!is.vector(x)){
stop("x should be a vector")
}
if(is.na(x)){
warning("Data contains NA, coercing  NA to Zero")
x[which(is.na(x))] <- 0
}
if(length(x)<1){
stop("x contains no element")
}
if(class(x) != "numeric"){
stop("x should be a numeric vector")
}
sum <- sum(x) #Summation
nos <- length(x) #number of observations
mean <- sum/nos
return(mean)
}
calculatemean(x = mtcars$mpg)
!is.vector(x)
is.na(x)
any(is.na(x))
any(is.na(x))
Data <- mtcars
Data[2,3] <- NA
is.na(Data)
any(is.na(Data))
library(Metrics)
Metrics::Correlationtable(mtcars)
View(mtcars)
fix(mtcars)
View(mtcars)
Metrics::Correlationtable(mtcars)
library(Metrics)
Metrics::Correlationtable(mtcars)
View(Metrics::Correlationtable(mtcars))
Metrics::calculatemean(mtcars$mpg)
Metrics::calculatemedian(mtcars$mpg)
Metrics::calculatesd(mtcars$mpg)
Metrics::calculatevariance(mtcars$mpg)
vignette(Metrics)
?Metrics
??Metrics
library(Metrics)
library(Metrics)
